name: Deploy Documentation

on:
  push:
    branches:
      - main
    paths:
      - 'documentation/**'
      - '.github/workflows/docs.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'documentation/**'
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    name: Build Documentation
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./documentation

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for git-revision-date plugin

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('documentation/pixi.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r <(python -c "import tomllib; f=open('pixi.toml','rb'); data=tomllib.load(f); deps=data.get('pypi-dependencies',{}); print('\n'.join(f'{k}{v}' for k,v in deps.items()))")

      - name: Build documentation
        run: |
          mkdocs build --strict --verbose

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./documentation/site

  # Deploy job (only on main branch)
  deploy:
    name: Deploy to GitHub Pages
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Link check job (optional, runs on PR)
  link-check:
    name: Check Links
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./documentation

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r <(python -c "import tomllib; f=open('pixi.toml','rb'); data=tomllib.load(f); deps=data.get('pypi-dependencies',{}); print('\n'.join(f'{k}{v}' for k,v in deps.items()))")

      - name: Build documentation (no strict)
        run: |
          mkdocs build --verbose

      - name: Check internal links
        run: |
          # Simple link check using grep
          echo "Checking for broken internal links..."
          find site -name "*.html" -exec grep -o 'href="[^"]*"' {} \; | \
            grep -v "^href=\"http" | \
            grep -v "^href=\"#" | \
            sed 's/href="//;s/"$//' | \
            sort | uniq > links.txt
          echo "Found $(wc -l < links.txt) unique internal links"
